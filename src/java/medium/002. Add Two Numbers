/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode result = new ListNode(0);
        ListNode temp = result;
        ListNode tempL1 = l1;
        ListNode tempL2 = l2;
        int overFlow = 0;
        while((tempL1 != null) && (tempL2 != null)){   
            int sum = tempL1.val+tempL2.val+overFlow;
            ListNode temp3 = new ListNode(sum % 10);
            temp.next = temp3;
            overFlow = sum / 10;
            temp = temp.next;
            tempL1 = tempL1.next;
            tempL2 = tempL2.next;
            
        }
        if(tempL1 != null){
            addAllNode(temp,tempL1,overFlow);
        }
        else if(tempL2 != null){
            addAllNode(temp,tempL2,overFlow);
        }
        else if(overFlow != 0){
            ListNode temp3 = new ListNode(overFlow);
            temp.next = temp3;
        }
        return result.next;
        
    }
    public void addAllNode(ListNode head,ListNode target,int overFlow){
        ListNode temp = target;
        ListNode tempHead = head;
        int tempOver = overFlow;
        while(temp != null){
            int sum = temp.val + tempOver;
            ListNode temp3 = new ListNode(sum % 10);
            tempHead.next = temp3;
            tempOver = sum / 10;
            temp = temp.next;
            tempHead = tempHead.next; 
        }
        if(tempOver != 0){
            ListNode temp3 = new ListNode(tempOver);
            tempHead.next = temp3;
        }
    }
}
